
'use client'

import { useState, useMemo, useEffect, useRef } from 'react';
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Bot, Send, User, ThumbsUp, ThumbsDown, X, MessageSquare } from "lucide-react";
import type { Message } from '@/lib/types';
import { mockMessages } from '@/lib/mock-data';
import { cn, hexToHSL } from '@/lib/utils';

type ChatWidgetProps = {
    primaryColor?: string;
    widgetBackgroundColor?: string;
    proactiveWelcomeEnabled?: boolean;
    proactiveWelcomeMessage?: string;
    chatbotName?: string;
};

export function ChatWidget({
    primaryColor = '#6366F1',
    widgetBackgroundColor = '#FFFFFF',
    proactiveWelcomeEnabled = false,
    proactiveWelcomeMessage = 'Hello! How can I help you today?',
    chatbotName = 'Chatbot'
}: ChatWidgetProps) {
  
  const [isOpen, setIsOpen] = useState(!proactiveWelcomeEnabled);
  const [messages, setMessages] = useState<Message[]>(proactiveWelcomeEnabled ? [] : mockMessages);
  const [input, setInput] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [feedbackGiven, setFeedbackGiven] = useState(false);
  const scrollAreaRef = useRef<HTMLDivElement>(null);

  const primaryColorHSL = useMemo(() => hexToHSL(primaryColor), [primaryColor]);
  const widgetBackgroundColorHSL = useMemo(() => hexToHSL(widgetBackgroundColor), [widgetBackgroundColor]);

  useEffect(() => {
    if (proactiveWelcomeEnabled && !isOpen) {
      const timer = setTimeout(() => {
        setIsOpen(true);
      }, 2000); // Open after 2 seconds
      return () => clearTimeout(timer);
    }
  }, [proactiveWelcomeEnabled, isOpen]);

  useEffect(() => {
    if (isOpen && proactiveWelcomeEnabled && proactiveWelcomeMessage && messages.length === 0) {
      const welcomeMsg: Message = {
        id: `bot-welcome-${Date.now()}`,
        role: 'assistant',
        content: proactiveWelcomeMessage,
        timestamp: new Date().toISOString(),
      };
      setMessages([welcomeMsg]);
    }
  }, [isOpen, proactiveWelcomeEnabled, proactiveWelcomeMessage, messages]);
  
  useEffect(() => {
    if (scrollAreaRef.current) {
        scrollAreaRef.current.scrollTo({
            top: scrollAreaRef.current.scrollHeight,
            behavior: 'smooth'
        });
    }
  }, [messages, isTyping]);


  const handleSend = () => {
    if (input.trim() === '') return;
    setFeedbackGiven(false);

    const userMessage: Message = {
      id: `user-${Date.now()}`,
      role: 'user',
      content: input,
      timestamp: new Date().toISOString(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsTyping(true);

    // Simulate bot response
    setTimeout(() => {
      const botResponse: Message = {
        id: `bot-${Date.now()}`,
        role: 'assistant',
        content: `This is a sample enhanced response to: "${input}". In a real app, this would be generated by an AI.`,
        timestamp: new Date().toISOString(),
      };
      setIsTyping(false);
      setMessages(prev => [...prev, botResponse]);
    }, 1500);
  };
  
  const handleRating = (rating: 'like' | 'dislike') => {
    setFeedbackGiven(true);
    // In a real application, you would send this feedback to your backend.
    console.log(`User feedback: ${rating}`);
  }

  const widgetStyles = {
    '--primary': primaryColorHSL,
    '--card': widgetBackgroundColorHSL,
  } as React.CSSProperties;

  if (!isOpen) {
    return (
      <Button
        className="rounded-full w-16 h-16 shadow-lg"
        style={widgetStyles}
        onClick={() => setIsOpen(true)}
      >
        <MessageSquare className="h-8 w-8 text-primary-foreground" />
      </Button>
    );
  }

  return (
    <div 
        className="flex flex-col h-[600px] w-full max-w-md rounded-xl border shadow-lg bg-card"
        style={widgetStyles}
    >
      <div className="flex items-center justify-between p-4 border-b">
        <div className="flex items-center gap-3">
          <Avatar>
            <AvatarFallback><Bot /></AvatarFallback>
          </Avatar>
          <div>
            <p className="font-semibold">{chatbotName}</p>
            <p className="text-xs text-muted-foreground">Online</p>
          </div>
        </div>
         <Button variant="ghost" size="icon" onClick={() => setIsOpen(false)}>
            <X className="h-4 w-4" />
        </Button>
      </div>
      <ScrollArea className="flex-1 p-4" ref={scrollAreaRef}>
        <div className="space-y-4">
          {messages.map((message, index) => {
            const isLastMessage = index === messages.length - 1;
            const showRating = isLastMessage && message.role === 'assistant';

            return (
              <div key={message.id}>
                <div
                  className={cn(
                    "flex items-end gap-2",
                    message.role === 'user' ? 'justify-end' : 'justify-start'
                  )}
                >
                  {message.role === 'assistant' && (
                    <Avatar className="h-8 w-8">
                      <AvatarFallback><Bot size={18} /></AvatarFallback>
                    </Avatar>
                  )}
                  <div
                    className={cn(
                      "max-w-xs rounded-lg px-3 py-2 text-sm md:max-w-sm",
                      message.role === 'user'
                        ? 'bg-primary text-primary-foreground'
                        : 'bg-muted'
                    )}
                  >
                    {message.content}
                  </div>
                  {message.role === 'user' && (
                    <Avatar className="h-8 w-8">
                       <AvatarFallback><User size={18} /></AvatarFallback>
                    </Avatar>
                  )}
                </div>
                {showRating && !isTyping && (
                  <div className="flex items-center gap-1 pl-10 pt-2">
                    {feedbackGiven ? (
                      <p className="text-xs text-muted-foreground">Thank you for your feedback!</p>
                    ) : (
                      <>
                        <Button variant="ghost" size="icon" className="h-7 w-7 text-muted-foreground hover:text-primary" onClick={() => handleRating('like')}>
                            <ThumbsUp className="h-4 w-4" />
                        </Button>
                        <Button variant="ghost" size="icon" className="h-7 w-7 text-muted-foreground hover:text-primary" onClick={() => handleRating('dislike')}>
                            <ThumbsDown className="h-4 w-4" />
                        </Button>
                      </>
                    )}
                  </div>
                )}
              </div>
            )
          })}
          {isTyping && (
             <div className="flex items-end gap-2 justify-start">
                <Avatar className="h-8 w-8">
                    <AvatarFallback><Bot size={18} /></AvatarFallback>
                </Avatar>
                <div className="max-w-xs rounded-lg px-3 py-2 text-sm bg-muted">
                    <div className="flex items-center gap-1">
                        <span className="h-2 w-2 rounded-full bg-muted-foreground animate-bounce [animation-delay:-0.3s]" />
                        <span className="h-2 w-2 rounded-full bg-muted-foreground animate-bounce [animation-delay:-0.15s]" />
                        <span className="h-2 w-2 rounded-full bg-muted-foreground animate-bounce" />
                    </div>
                </div>
            </div>
          )}
        </div>
      </ScrollArea>
      <div className="p-4 border-t">
        <form
          onSubmit={(e) => {
            e.preventDefault();
            handleSend();
          }}
          className="flex items-center gap-2"
        >
          <Input
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Type a message..."
            autoComplete="off"
            className="bg-background"
          />
          <Button type="submit" size="icon" disabled={isTyping}>
            <Send className="h-4 w-4" />
          </Button>
        </form>
      </div>
    </div>
  );
}
